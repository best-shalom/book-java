# 应用服务 WEB 访问端口
server.port=8080

# mysql-connector-java 6.0.x 数据库连接
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/book?rewriteBatchedStatements=true&useUnicode=true&serverTimezone=Asia/Shanghai&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true
spring.datasource.username=book
spring.datasource.password=123456

spring.jpa.database=mysql
#是否展示sql
spring.jpa.show-sql=true
#是否自动生/更新成表，根据什么策略,选项如下：
#none：JPA不会自动创建或更新数据库表结构。这意味着你需要手动创建数据库表，或者使用脚本来初始化数据库。
#create：每次应用程序启动时，JPA都会删除已存在的表，并重新创建新的表结构。这会导致数据的丢失，因此只适用于开发和测试环境。
#create-drop：类似于 create，但在应用程序关闭时会删除表结构。这也会导致数据的丢失，因此只适用于开发和测试环境。
#validate：JPA会验证实体类与数据库表结构的一致性，如果不一致则抛出异常。这个选项不会修改数据库表结构。
#update：JPA会根据实体类的定义，自动创建或更新数据库表结构。当数据库表结构不存在时，会创建对应的表；当数据库表结构已存在时，会根据实体类的定义进行更新。
# 这是默认选项，适用于大多数情况。需要注意的是，JPA只负责维护表结构的一致性，不会自动更新实体类。如果你的实体类发生了变化（比如添加、修改或删除字段），你需要手动更新实体类以反映这些变化。
spring.jpa.hibernate.ddl-auto=update
#命名策略，会将Java代码中的驼峰命名法映射到数据库中会变成下划线法
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy